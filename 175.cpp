#include <iostream>

class Parent 
{
public:
    virtual void function1() { std::cout << "Parent function1\n"; }
    virtual void function2() { std::cout << "Parent function2\n"; }
};

class C1 : public Parent 
{
public:
    virtual void function1() { std::cout << "C1 function1\n"; }
};

class C2 : public Parent 
{
public:
    virtual void function2() { std::cout << "C2 function2\n"; }
};

int main() 
{
    Parent *pPtr;
    
    C1 c1;
    pPtr = &c1;
    pPtr->function1();  // Викликає C1::function1

    C2 c2;
    pPtr = &c2;
    pPtr->function2();  // Викликає C2::function2

    return 0;
}
/* Віртуальні таблиці в C++

Віртуальна таблиця (або vtable) в C++ — це таблиця, яка зберігає інформацію про функції, викликані через пізнє зв'язування (динамічне зв'язування). Вона дозволяє викликати правильно перевизначені функції в залежності від типу об'єкта, навіть якщо використовується вказівник або посилання на базовий клас.

Як працюють віртуальні таблиці:

Кожен клас, який використовує віртуальні функції або успадковує їх від батьківського класу, має свою власну віртуальну таблицю.
Віртуальна таблиця — це масив вказівників на функції. Кожен вказівник в таблиці вказує на відповідну функцію для цього класу.
Кожен об'єкт класу має прихований вказівник на віртуальну таблицю цього класу — __vptr. Цей вказівник дозволяє визначити, яку функцію викликати, навіть якщо ми працюємо з об'єктами через вказівники на базовий клас.
Як заповнюються віртуальні таблиці:

Віртуальні таблиці заповнюються в залежності від перевизначених функцій.
Якщо функція перекривається в дочірньому класі, то запис у віртуальній таблиці класу буде вказувати на перевизначену функцію.
Якщо функція не перекривається в дочірньому класі, то віртуальна таблиця вказуватиме на функцію базового класу.



Віртуальні таблиці дозволяють реалізувати динамічне (пізнє) зв'язування в C++, що дозволяє викликати відповідні функції залежно від типу об'єкта, навіть коли працюємо з вказівниками на базовий клас.
Віртуальні функції мають невелике накладне навантаження на продуктивність через додаткові операції для пошуку віртуальної таблиці та виклику функції, але для сучасних комп'ютерів це не є суттєвим.
 */